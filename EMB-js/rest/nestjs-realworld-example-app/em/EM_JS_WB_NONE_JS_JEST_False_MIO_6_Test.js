const superagent = require("superagent");
// const EM = require("evomaster-client-js").EMTestUtils;
const AppController = require("./app-driver.js");




/**
 * This file was automatically generated by EvoMaster on 2021-09-03T00:43:35.170+02:00[Europe/Berlin]
 * 
 * The generated test suite contains 49 tests
 * 
 * Covered targets: 614
 * 
 * Used time: 0h 56m 25s
 * 
 * Needed budget for current results: 51%
 * 
 * 
 */

const controller = new AppController();
let baseUrlOfSut;


beforeAll( async () => {
    await controller.setupForGeneratedTest();
    baseUrlOfSut = await controller.startSut();
    expect(baseUrlOfSut).toBeTruthy();
});


afterAll( async () => {
    await controller.stopSut();
});


beforeEach(async () =>  {
    await controller.resetStateOfSUT();
});




test("test_0_with500", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/VJ%C2%83").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_1_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/profiles/SD8_vSQynU%C2%83qVs").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/profile/profile.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_2_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/articles/78RakGgAV%C2%88BqDRMI").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"description\": \"evomaster_159_input\", " + 
                " \"body\": \"78RakGgAVhBqDRMI\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.service.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_3_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/profiles/%C2%82SQAcF/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/profile/profile.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_4_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "favorited=ZVUl6&" + 
                "limit=537&" + 
                "offset=-670567809").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_5_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/SGoiyB%C2%98hbHH7f3xF").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.service.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
    
    const res_1 = await superagent
            .post(baseUrlOfSut + "/api/articles/evomaster_842_input/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_1.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(500.0);
    expect(res_1.body.message).toBe("Internal server error");
});


test("test_6_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"We9TÂ€KaqB\", " + 
                " \"password\": \"fZqE2Pm\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/user/user.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_7_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"Pe9N\", " + 
                " \"description\": \"F4bczP\", " + 
                " \"body\": \"Nx9yWXPo5v4fRh\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(201);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.title).toBe("Pe9N");
    expect(res_0.body.description).toBe("F4bczP");
    expect(res_0.body.slug).toBe("pe9n--zf88o0");
    expect(res_0.body.tagList.length).toBe(0);
    expect(res_0.body.comments.length).toBe(0);
    expect(res_0.body.body).toBe("");
    expect(res_0.body.created).toBe("2021-09-02T19:47:31.000Z");
    expect(res_0.body.updated).toBe("2021-09-02T19:47:31.000Z");
    expect(res_0.body.favoriteCount).toBe(0.0);
    
    const res_1 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"DTcOXlUJM\", " + 
                " \"description\": \"FBKuy1R8UilgHA\", " + 
                " \"body\": \"evomaster_100_input\", " + 
                " \"tagList\": [ " + 
                " \"sXUVBE\", " + 
                " \"Dbtf3uy9LHudUm1\", " + 
                " \"d7jueT9kE\", " + 
                " \"V6P7Jdimnsr\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_1.status).toBe(201);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.title).toBe("DTcOXlUJM");
    expect(res_1.body.description).toBe("FBKuy1R8UilgHA");
    expect(res_1.body.slug).toBe("dtcoxlujm-jaxqnu");
    expect(res_1.body.tagList.length).toBe(4);
    expect(res_1.body.tagList[0]).toBe("sXUVBE");
    expect(res_1.body.tagList[1]).toBe("Dbtf3uy9LHudUm1");
    expect(res_1.body.tagList[2]).toBe("d7jueT9kE");
    expect(res_1.body.tagList[3]).toBe("V6P7Jdimnsr");
    expect(res_1.body.comments.length).toBe(0);
    expect(res_1.body.body).toBe("");
    expect(res_1.body.created).toBe("2021-09-02T19:47:31.000Z");
    expect(res_1.body.updated).toBe("2021-09-02T19:47:31.000Z");
    expect(res_1.body.favoriteCount).toBe(0.0);
    
    const res_2 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"\", " + 
                " \"description\": \"evomaster_101_input\", " + 
                " \"body\": \"lTdDhOSnVEZ\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_2.status).toBe(201);
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.title).toBe("");
    expect(res_2.body.description).toBe("evomaster_101_input");
    expect(res_2.body.slug).toBe("-ybo524");
    expect(res_2.body.tagList.length).toBe(0);
    expect(res_2.body.comments.length).toBe(0);
    expect(res_2.body.body).toBe("");
    expect(res_2.body.created).toBe("2021-09-02T19:47:31.000Z");
    expect(res_2.body.updated).toBe("2021-09-02T19:47:31.000Z");
    expect(res_2.body.favoriteCount).toBe(0.0);
    
    const res_3 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"evomaster_102_input\", " + 
                " \"description\": \"XFzJDGbfmqryqMRj\", " + 
                " \"body\": \"XvpSLi_n4T3N0\", " + 
                " \"tagList\": [ " + 
                " \"1baHfyZYjySt40\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_3.status).toBe(201);
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.title).toBe("evomaster_102_input");
    expect(res_3.body.description).toBe("XFzJDGbfmqryqMRj");
    expect(res_3.body.slug).toBe("evomaster_102_input-dmx32l");
    expect(res_3.body.tagList.length).toBe(1);
    expect(res_3.body.tagList[0]).toBe("1baHfyZYjySt40");
    expect(res_3.body.comments.length).toBe(0);
    expect(res_3.body.body).toBe("");
    expect(res_3.body.created).toBe("2021-09-02T19:47:31.000Z");
    expect(res_3.body.updated).toBe("2021-09-02T19:47:31.000Z");
    expect(res_3.body.favoriteCount).toBe(0.0);
    
    const res_4 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"evomaster_103_input\", " + 
                " \"description\": \"\", " + 
                " \"body\": \"ms5Om1D1XJC\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_4.status).toBe(201);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.title).toBe("evomaster_103_input");
    expect(res_4.body.description).toBe("");
    expect(res_4.body.slug).toBe("evomaster_103_input-a8u5pn");
    expect(res_4.body.tagList.length).toBe(0);
    expect(res_4.body.comments.length).toBe(0);
    expect(res_4.body.body).toBe("");
    expect(res_4.body.created).toBe("2021-09-02T19:47:31.000Z");
    expect(res_4.body.updated).toBe("2021-09-02T19:47:31.000Z");
    expect(res_4.body.favoriteCount).toBe(0.0);
    
    const res_5 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"evomaster_104_input\", " + 
                " \"description\": \"vjtsSaCSZydWmq\", " + 
                " \"body\": \"evomaster_105_input\", " + 
                " \"tagList\": [ " + 
                " \"_JxHVijWcWGj7o\", " + 
                " \"bm\", " + 
                " \"qGewYVEanE6CwI\u0010\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_5.status).toBe(400);
    expect(res_5.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_5.body.statusCode).toBe(400.0);
    expect(res_5.body.message).toBe("Unexpected token  in JSON at position 155");
    expect(res_5.body.error).toBe("Bad Request");
    
    const res_6 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "author=v6o3I8&" + 
                "offset=530").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_6.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_6.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_6.body.statusCode).toBe(500.0);
    expect(res_6.body.message).toBe("Internal server error");
});


test("test_8_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/kcqID4jG/comments").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_9_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/articles/VkWY9mcJ").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"body\": \"VkWY9mcJ\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.service.js_177_149
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_10_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles/2U2ftaFU2/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_11_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed?limit=696").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.articles.length).toBe(0);
    expect(res_0.body.articlesCount).toBe(0.0);
    
    const res_1 = await superagent
            .get(baseUrlOfSut + "/api/articles/A/comments").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_1.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(500.0);
    expect(res_1.body.message).toBe("Internal server error");
    
    const res_2 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"hiC\", " + 
                " \"description\": \"82uÂ‚YRjolF8EY\", " + 
                " \"body\": \"1MYLtspCElyg\", " + 
                " \"tagList\": [ " + 
                " \"evomaster_6491_input\", " + 
                " \"F2hDcc9W\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_2.status).toBe(500); // src/dist/article/article.service.js_18_35
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.statusCode).toBe(500.0);
    expect(res_2.body.message).toBe("Internal server error");
    
    const res_3 = await superagent
            .put(baseUrlOfSut + "/api/articles/bG").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"RtoH3Mntw\", " + 
                " \"description\": \"wRtoUfD8E\", " + 
                " \"body\": \"aG\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_3.status).toBe(500); // src/dist/article/article.service.js_177_149
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.statusCode).toBe(500.0);
    expect(res_3.body.message).toBe("Internal server error");
});


test("test_12_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/6jDYFH__Ci/comments/475").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_13_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles/uKPOiyNdoDImln4b/comments").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"comment\": { " + 
                " \"body\": \"uKPOiyNdoDImln4b\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_14_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"\", " + 
                " \"token\": \"\", " + 
                " \"bio\": \"HiO2xee5mRimHV\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.username).toBe("foo");
    expect(res_0.body.email).toBe("");
    expect(res_0.body.bio).toBe("HiO2xee5mRimHV");
    expect(res_0.body.image).toBe("");
    expect(res_0.body.token).toBe("");
    
    const res_1 = await superagent
            .post(baseUrlOfSut + "/api/profiles/GzEzcx_Vu9uBt/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_1.status).toBe(400);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(400.0);
    expect(res_1.body.message).toBe("Follower email and username not provided.");
    
    const res_2 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"tX_llUbMo\", " + 
                " \"description\": \"jFGOBNV\", " + 
                " \"body\": \"lpifDHFaWOz\", " + 
                " \"tagList\": [ " + 
                " \"ide0ONoXj\", " + 
                " \"UCupYO\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_2.status).toBe(201);
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.title).toBe("tX_llUbMo");
    expect(res_2.body.description).toBe("jFGOBNV");
    expect(res_2.body.slug).toBe("tx_llubmo-upl1q6");
    expect(res_2.body.tagList.length).toBe(2);
    expect(res_2.body.tagList[0]).toBe("ide0ONoXj");
    expect(res_2.body.tagList[1]).toBe("UCupYO");
    expect(res_2.body.comments.length).toBe(0);
    expect(res_2.body.body).toBe("");
    expect(res_2.body.created).toBe("2021-09-02T19:52:49.000Z");
    expect(res_2.body.updated).toBe("2021-09-02T19:52:49.000Z");
    expect(res_2.body.favoriteCount).toBe(0.0);
    
    const res_3 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed?" + 
                "limit=886&" + 
                "offset=397").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_3.status).toBe(200);
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.articles.length).toBe(0);
    expect(res_3.body.articlesCount).toBe(0.0);
    
    const res_4 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"\", " + 
                " \"password\": \"D\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_4.status).toBe(400);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.message).toBe("Input data validation failed");
    expect(res_4.body.errors.emailisNotEmpty).toBe("email should not be empty");
    
    const res_5 = await superagent
            .post(baseUrlOfSut + "/api/articles/R5qagnH4cXE/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_5.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_5.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_5.body.statusCode).toBe(500.0);
    expect(res_5.body.message).toBe("Internal server error");
    
    const res_6 = await superagent
            .get(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_6.status).toBe(200);
    expect(res_6.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_6.body.user.username).toBe("foo");
    expect(res_6.body.user.email).toBe("");
    expect(res_6.body.user.bio).toBe("HiO2xee5mRimHV");
    expect(res_6.body.user.token).toBe("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJmb28iLCJlbWFpbCI6IiIsImV4cCI6MTYzNTgwNzE3MC4zMywiaWF0IjoxNjMwNjE5NTcwfQ.nbDacTQSVVA66Zelm5qJ2_Fl8P_jCNxIK7HygsdjhC4");
    expect(res_6.body.user.image).toBe("");
});


test("test_15_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/profiles/iKT/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/profile/profile.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_16_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"ukkMjIsakX0Pwzh\", " + 
                " \"description\": \"zN4XKfmF\", " + 
                " \"body\": \"sWTfkCz6P2tvLE2\", " + 
                " \"tagList\": [ " + 
                " \"o7PO2\" " + 
                " ] " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(201);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.title).toBe("ukkMjIsakX0Pwzh");
    expect(res_0.body.description).toBe("zN4XKfmF");
    expect(res_0.body.slug).toBe("ukkmjisakx0pwzh-2s6y0k");
    expect(res_0.body.tagList.length).toBe(1);
    expect(res_0.body.tagList[0]).toBe("o7PO2");
    expect(res_0.body.comments.length).toBe(0);
    expect(res_0.body.body).toBe("");
    expect(res_0.body.created).toBe("2021-09-02T19:51:29.000Z");
    expect(res_0.body.updated).toBe("2021-09-02T19:51:29.000Z");
    expect(res_0.body.favoriteCount).toBe(0.0);
    
    const res_1 = await superagent
            .put(baseUrlOfSut + "/api/articles/edM3R").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"gQ2jDLNRdHmN2uNT\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_1.status).toBe(500); // src/dist/article/article.service.js_177_149
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(500.0);
    expect(res_1.body.message).toBe("Internal server error");
    
    const res_2 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"\", " + 
                " \"token\": \"Xj\", " + 
                " \"username\": \"nh\", " + 
                " \"bio\": \"39PhNGVsU\", " + 
                " \"image\": \"ytk1p5wlv\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_2.status).toBe(200);
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.username).toBe("nh");
    expect(res_2.body.email).toBe("");
    expect(res_2.body.bio).toBe("39PhNGVsU");
    expect(res_2.body.image).toBe("ytk1p5wlv");
    expect(res_2.body.token).toBe("Xj");
    
    const res_3 = await superagent
            .post(baseUrlOfSut + "/api/profiles/6mXuqOTa/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_3.status).toBe(400);
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.statusCode).toBe(400.0);
    expect(res_3.body.message).toBe("Follower email and username not provided.");
    
    const res_4 = await superagent
            .get(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_4.status).toBe(200);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.user.username).toBe("nh");
    expect(res_4.body.user.email).toBe("");
    expect(res_4.body.user.bio).toBe("39PhNGVsU");
    expect(res_4.body.user.token).toBe("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJuaCIsImVtYWlsIjoiIiwiZXhwIjoxNjM1ODA3MDkwLjM5MywiaWF0IjoxNjMwNjE5NDkwfQ.VnIOKe-h1j9cynwBrctpCMnBzpl2Wwrgg3W8OMIvPws");
    expect(res_4.body.user.image).toBe("ytk1p5wlv");
    
    const res_5 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"WIRhFmBFnH\", " + 
                " \"description\": \"p1UhhdRu\", " + 
                " \"body\": \"6wDyfXIKW\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_5.status).toBe(201);
    expect(res_5.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_5.body.title).toBe("WIRhFmBFnH");
    expect(res_5.body.description).toBe("p1UhhdRu");
    expect(res_5.body.slug).toBe("wirhfmbfnh-3f98je");
    expect(res_5.body.tagList.length).toBe(0);
    expect(res_5.body.comments.length).toBe(0);
    expect(res_5.body.body).toBe("");
    expect(res_5.body.created).toBe("2021-09-02T19:51:29.000Z");
    expect(res_5.body.updated).toBe("2021-09-02T19:51:29.000Z");
    expect(res_5.body.favoriteCount).toBe(0.0);
    
    const res_6 = await superagent
            .get(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_6.status).toBe(200);
    expect(res_6.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_6.body.user.username).toBe("nh");
    expect(res_6.body.user.email).toBe("");
    expect(res_6.body.user.bio).toBe("39PhNGVsU");
    expect(res_6.body.user.token).toBe("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJuaCIsImVtYWlsIjoiIiwiZXhwIjoxNjM1ODA3MDkwLjQxOSwiaWF0IjoxNjMwNjE5NDkwfQ.lrXljVu0RbHgdHGE-bmLBfizsklXpwL9SPcwA94Pn2k");
    expect(res_6.body.user.image).toBe("ytk1p5wlv");
    
    const res_7 = await superagent
            .delete(baseUrlOfSut + "/api/articles/iIZrPly4Lqxpt0V/comments/333").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_7.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_7.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_7.body.statusCode).toBe(500.0);
    expect(res_7.body.message).toBe("Internal server error");
    
    const res_8 = await superagent
            .post(baseUrlOfSut + "/api/profiles/2/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_8.status).toBe(400);
    expect(res_8.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_8.body.statusCode).toBe(400.0);
    expect(res_8.body.message).toBe("Follower email and username not provided.");
});


test("test_17_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "tag=gHYJO&" + 
                "author=sCZrVC1gn09mzm9&" + 
                "limit=371&" + 
                "offset=406").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_18_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed?" + 
                "limit=748&" + 
                "offset=25").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.articles.length).toBe(0);
    expect(res_0.body.articlesCount).toBe(0.0);
    
    const res_1 = await superagent
            .delete(baseUrlOfSut + "/api/articles/OwIyYK3Ty2Xb").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_1.status).toBe(401);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(401.0);
    expect(res_1.body.message).toBe("Not authorized.");
    
    const res_2 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "tag=X&" + 
                "limit=65&" + 
                "offset=226").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_2.status).toBe(200);
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.articles.length).toBe(0);
    expect(res_2.body.articlesCount).toBe(0.0);
    
    const res_3 = await superagent
            .post(baseUrlOfSut + "/api/articles/6r7FiUxVnEfT/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_3.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.statusCode).toBe(500.0);
    expect(res_3.body.message).toBe("Internal server error");
    
    const res_4 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "limit=685&" + 
                "offset=514").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_4.status).toBe(200);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.articles.length).toBe(0);
    expect(res_4.body.articlesCount).toBe(0.0);
    
    const res_5 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_5.status).toBe(200);
    expect(res_5.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_5.body.articles.length).toBe(0);
    expect(res_5.body.articlesCount).toBe(0.0);
    
    const res_6 = await superagent
            .post(baseUrlOfSut + "/api/articles/1LJZOGlf6/comments").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"comment\": { " + 
                " \"body\": \"1LJZOGlf6\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_6.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_6.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_6.body.statusCode).toBe(500.0);
    expect(res_6.body.message).toBe("Internal server error");
    
    const res_7 = await superagent
            .get(baseUrlOfSut + "/api/articles?offset=929").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_7.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_7.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_7.body.statusCode).toBe(500.0);
    expect(res_7.body.message).toBe("Internal server error");
    
    const res_8 = await superagent
            .delete(baseUrlOfSut + "/api/articles/L8E4Wd9/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_8.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_8.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_8.body.statusCode).toBe(500.0);
    expect(res_8.body.message).toBe("Internal server error");
});


test("test_19_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/profiles/snN/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/profile/profile.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_20_with500", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/bk/favorite").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // src/dist/article/article.controller.js_18_35
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(500.0);
    expect(res_0.body.message).toBe("Internal server error");
});


test("test_21", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/profiles/C").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


test("test_22", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    let location_articles = "";
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"RKZsxdYk\", " + 
                " \"description\": \"YlQb2g\", " + 
                " \"body\": \"z\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    location_articles = "/api/articles/" + res_0.extract().body().path("id").toString();
    
    expect(res_0.status).toBe(201);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.title).toBe("RKZsxdYk");
    expect(res_0.body.description).toBe("YlQb2g");
    expect(res_0.body.slug).toBe("rkzsxdyk-xl4pbo");
    expect(res_0.body.tagList.length).toBe(0);
    expect(res_0.body.comments.length).toBe(0);
    expect(res_0.body.body).toBe("");
    expect(res_0.body.created).toBe("2021-09-02T19:47:26.000Z");
    expect(res_0.body.updated).toBe("2021-09-02T19:47:26.000Z");
    expect(res_0.body.favoriteCount).toBe(0.0);
    
    const res_1 = await superagent
            .get(EM.resolveLocation(location_articles, baseUrlOfSut + "/api/articles/feed?limit=777")).set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_1.status).toBe(200);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(Object.keys(res_1.body).length).toBe(0);
});


test("test_23", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"username\": \"3jJd\", " + 
                " \"bio\": \"g9er6eYvN\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.username).toBe("3jJd");
    expect(res_0.body.email).toBe("foo@foo.foo");
    expect(res_0.body.bio).toBe("g9er6eYvN");
    expect(res_0.body.image).toBe("");
    
    const res_1 = await superagent
            .delete(baseUrlOfSut + "/api/profiles/3jJd/follow").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_1.status).toBe(400);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.statusCode).toBe(400.0);
    expect(res_1.body.message).toBe("FollowerId and FollowingId cannot be equal.");
    
    const res_2 = await superagent
            .get(baseUrlOfSut + "/api/tags").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_2.status).toBe(200);
    expect(res_2.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_2.body.length).toBe(0);
});


test("test_24", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/uLCza").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.raw.fieldCount).toBe(0.0);
    expect(res_0.body.raw.affectedRows).toBe(0.0);
    expect(res_0.body.raw.insertId).toBe(0.0);
    expect(res_0.body.raw.serverStatus).toBe(34.0);
    expect(res_0.body.raw.warningCount).toBe(0.0);
    expect(res_0.body.raw.message).toBe("");
    expect(res_0.body.raw.protocol41).toBe(true);
    expect(res_0.body.raw.changedRows).toBe(0.0);
    expect(res_0.body.affected).toBe(0.0);
});


test("test_25", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.user.username).toBe("foo");
    expect(res_0.body.user.email).toBe("foo@foo.foo");
    expect(res_0.body.user.bio).toBe("");
    expect(res_0.body.user.token).toBe("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJmb28iLCJlbWFpbCI6ImZvb0Bmb28uZm9vIiwiZXhwIjoxNjM1ODA2ODMwLjc1NiwiaWF0IjoxNjMwNjE5MjMwfQ.hQSLph7fhU87JUm0KtP26kUEru7wxOSRxK2g0e7ag48");
    expect(res_0.body.user.image).toBe("");
});


test("test_26", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/jal").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(Object.keys(res_0.body).length).toBe(0);
});


test("test_27", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed?offset=306").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.articles.length).toBe(0);
    expect(res_0.body.articlesCount).toBe(0.0);
});


test("test_28", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles?" + 
                "tag=evomaster_5_input&" + 
                "limit=371").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.articles.length).toBe(0);
    expect(res_0.body.articlesCount).toBe(0.0);
});


test("test_29", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"bio\": \"F\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.username).toBe("foo");
    expect(res_0.body.email).toBe("foo@foo.foo");
    expect(res_0.body.bio).toBe("F");
    expect(res_0.body.image).toBe("");
});


test("test_30", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/articles/YQMfmNz3M").set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"body\": \"YQMfmNz3M\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
    
    const res_1 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"YkzjqBbnp\", " + 
                " \"username\": \"HmGbpbs\", " + 
                " \"image\": \"I4qx\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_1.status).toBe(200);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.username).toBe("HmGbpbs");
    expect(res_1.body.email).toBe("YkzjqBbnp");
    expect(res_1.body.bio).toBe("");
    expect(res_1.body.image).toBe("I4qx");
    
    const res_2 = await superagent
            .get(baseUrlOfSut + "/api/profiles/LmLks").set('Accept', "*/*")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_2.status).toBe(200);
    expect(res_2.body===null || res_2.body===undefined || res_2.body==="" || Object.keys(res_2.body).length === 0).toBe(true);
    
    const res_3 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"s8N1PeHV\", " + 
                " \"username\": \"77B\", " + 
                " \"bio\": \"\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_3.status).toBe(200);
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.username).toBe("77B");
    expect(res_3.body.email).toBe("s8N1PeHV");
    expect(res_3.body.bio).toBe("");
    expect(res_3.body.image).toBe("I4qx");
    
    const res_4 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"E8iSUpSKryM2\", " + 
                " \"password\": \"CNI5ko5\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_4.status).toBe(401);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.errors.User).toBe(" not found");
    
    const res_5 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"\", " + 
                " \"password\": \"25B_9OFHj3Rq6\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_5.status).toBe(400);
    expect(res_5.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_5.body.message).toBe("Input data validation failed");
    expect(res_5.body.errors.emailisNotEmpty).toBe("email should not be empty");
});


test("test_31", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/profiles/_4IIlOTkKqp").set('Accept', "*/*")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


test("test_32", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/tags").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


test("test_33", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"c\", " + 
                " \"description\": \"GOV4GtVF5RLaOw\", " + 
                " \"body\": \"dQ8K\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(201);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.title).toBe("c");
    expect(res_0.body.description).toBe("GOV4GtVF5RLaOw");
    expect(res_0.body.slug).toBe("c-z96utx");
    expect(res_0.body.tagList.length).toBe(0);
    expect(res_0.body.comments.length).toBe(0);
    expect(res_0.body.body).toBe("");
    expect(res_0.body.created).toBe("2021-09-02T19:47:09.000Z");
    expect(res_0.body.updated).toBe("2021-09-02T19:47:09.000Z");
    expect(res_0.body.favoriteCount).toBe(0.0);
});


test("test_34", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"\", " + 
                " \"password\": \"p4J\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.message).toBe("Input data validation failed");
    expect(res_0.body.errors.emailisNotEmpty).toBe("email should not be empty");
});


test("test_35", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles/rNjbwPXVXZ/favorite").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_36", async () => {
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/u_zLE9N4/comments/108").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_37", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles/gYyfUO/comments").set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"comment\": { " + 
                " \"body\": \"gYyfUO\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_38", async () => {
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/_lkDv9_E8_").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_39", async () => {
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/articles/T2VMUCQLZI").set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"I\", " + 
                " \"body\": \"T2VMUCQLZI\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_40", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/articles").set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"article\": { " + 
                " \"title\": \"RC4Dpc5FLnSUlBBC\", " + 
                " \"description\": \"gucJu3IKsjp\", " + 
                " \"body\": \"bMNVz\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_41", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/articles/feed").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_42", async () => {
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/profiles/vPzB5W3DbhQu2LZ/follow").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_43", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/profiles/PmKFHMgYM3/follow").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_44", async () => {
    
    const res_0 = await superagent
            .put(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"fugB63PMg\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_45", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_46", async () => {
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/api/articles/AKTKCCri1/favorite").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(401.0);
    expect(res_0.body.message).toBe("Not authorized.");
});


test("test_47", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/users/login").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"8Kld4vq\", " + 
                " \"password\": \"NvgR3u_9Ug\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.errors.User).toBe(" not found");
});


test("test_48", async () => {
    
    let token_foo = "token ";
    await superagent
            .post(baseUrlOfSut + "/api/users/login")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"email\": \"foo@foo.foo\", " + 
                " \"password\": \"foofoo\" " + 
                " } " + 
                " } ")
            .then(res => {token_foo += res.body.user.token;});
            
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/api/user").set('Accept', "application/json")
            .set("Authorization", token_foo) // foo-auth
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"user\": { " + 
                " \"username\": \"vuuSfAM1NfKz\", " + 
                " \"email\": \"oWZfb3Mlb4dJL0tv\", " + 
                " \"password\": \"YXCjwO\" " + 
                " } " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(404);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.statusCode).toBe(404.0);
    expect(res_0.body.message).toBe("Cannot POST /api/user");
    expect(res_0.body.error).toBe("Not Found");
});
